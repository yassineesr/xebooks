---
- name: Cleanup CA and certs
  hosts: all
  become: true 

  tasks: 
  - name: Remove directory /certs 
    ansible.builtin.file:
      path: /certs # "{{certs_dir}}"
      state: absent

  - name : Remove file /anchors/ca.crt
    ansible.builtin.file:
      path: /etc/pki/ca-trust/source/anchors/ca.crt
      state: absent 


- name: Cleanup and drain kubernetes hosts
  hosts: control_planes, nodes
  become: true

  tasks:
  - name: Remove file .kube
    ansible.builtin.file:
      path: ~/.kube
      state: absent 

  - name: Check if kubeadm is installed
    ansible.builtin.command: which kubeadm
    register: kubeadm_check
    ignore_errors: true
    failed_when: false

  - name: Reset kubeadm if installed
    ansible.builtin.expect:
      command: kubeadm reset
      responses:
        '\[reset\] Are you sure you want to proceed\? \[y/N\]': 'Y'
    when: kubeadm_check.rc == 0 # Task runs only if kubeadm is installed

  - name: Remove directory kubernetes
    ansible.builtin.file:
      path: /etc/kubernetes/
      state: absent

  - name: Remove directory etcd
    ansible.builtin.file:
      path: /var/lib/etcd
      state: absent

  - name: Remove directory net.d
    ansible.builtin.file:
      path: /etc/cni/net.d
      state: absent


  - name: Gather service facts
    ansible.builtin.service_facts:

  - name: Stop service crio if it's installed and running
    ansible.builtin.service:
      name: crio
      state: stopped
      enabled: no
    when:
      - "'crio' in ansible_facts.services"  # Check if 'crio' service is in service facts
      - ansible_facts.services['crio'].state == 'running'  # Check if 'crio' service is running

  - name: Stop service kubelet if it's installed and running
    ansible.builtin.service:
      name: kubelet
      state: stopped
      enabled: no
    when:
      - "'kubelet' in ansible_facts.services"  
      - ansible_facts.services['kubelet'].state == 'running'   
      
 # - name: Stop service crio, if started
 #   ansible.builtin.service:
 #     name: crio
 #     state: stopped
 #     enabled: no
    
#  - name: Stop service kubelet, if started
#    ansible.builtin.service:
#      name: kubelet
#      state: stopped
#      enabled: no
#    when: ansible_facts.services['kubelet'].status == 'running'


- name: Cleanup container registry
  hosts: container_registry
  become: true

  tasks:
  - name: Check if Docker container 'registry' exists
    ansible.builtin.shell:
      cmd: "docker ps -aq --filter name=registry"
    register: docker_registry_check

  - name: Stop registry
    ansible.builtin.command: 
      cmd: "docker stop registry"
    when: docker_registry_check.stdout != ""

  - name: Remove registry
    ansible.builtin.command: 
      cmd: "docker remove registry"
    when: docker_registry_check.stdout != ""

  - name: Remove data
    ansible.builtin.file: 
      path: "{{ registry_data_dir }}"
      state: absent

- name: Reboot machines
  hosts: all
  become: true

  tasks:
    - name: Reboot the machine
      ansible.builtin.reboot:

  
    
